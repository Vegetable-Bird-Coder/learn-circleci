version: 2.1

orbs:
  coveralls: coveralls/coveralls@2.2.5

parameters:
  run_go_test:
    type: boolean
    default: false

jobs:
  go_test:
    docker:
      - image: cimg/go:1.24.1
    steps:
      - checkout
      Based on your repeated error message:

fatal: could not read Username for 'https://github.com': terminal prompts disabled
Even after discussing SSH configuration for CircleCI, the go install command is still attempting to use HTTPS and encountering a prompt for credentials in a non-interactive environment.

This strongly suggests one of two things:

The SSH Key configuration in CircleCI (Step 3 and 4 in my previous instructions) was not fully completed or correctly applied. This is the most common reason for this persistent error. You need to ensure:

The private key is correctly added to "Additional SSH Keys" in your CircleCI Project Settings, with github.com as the hostname.

The fingerprints in your .circleci/config.yml's add_ssh_keys step exactly match the fingerprint generated by CircleCI for that private key.

The add_ssh_keys step is placed before the Install go-lcov step in your job.

Go's module download process is explicitly overriding the Git SSH config or the git config --global url."git@github.com:".insteadOf "https://github.com/" workaround didn't take effect. While less common for public repositories, sometimes Go's internal module handling or proxy settings can interfere.

Let's try a different, more direct approach for installation, bypassing go install and git clone's default behavior, and relying on wget or curl to download the binary directly if a pre-compiled version is available, or manually building if not.

For go-lcov, the creator (jstemmer) doesn't seem to provide pre-compiled binaries on GitHub Releases. So, we'll stick to a manual build from source. However, we'll try to ensure git doesn't prompt for credentials.

Revised Strategy: Manual go-lcov Installation within CircleCI

This strategy attempts to perform the git clone and go build steps for go-lcov in a more controlled manner, specifically addressing the credential prompting.

YAML

# .circleci/continue_config.yml
version: 2.1

orbs:
  coveralls: coveralls/coveralls@2.2.5

parameters:
  run_go_test:
    type: boolean
    default: false

jobs:
  go_test:
    docker:
      - image: cimg/go:1.24.1
    steps:
      - checkout
      # Ensure GOPATH/bin is in PATH for manual install
      - run:
          name: Setup Go Environment
          command: |
            echo 'export GOPATH=$HOME/go' >> $BASH_ENV
            echo 'export PATH=$GOPATH/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV
            go env # Print Go environment for debugging

      # --- START: Manual go-lcov Installation ---
      # This replaces the 'Install go-lcov' step
      - run:
          name: Manually install go-lcov
          command: |
            # Create a temporary directory for cloning go-lcov
            mkdir -p /tmp/go-lcov-src
            cd /tmp/go-lcov-src

            # Attempt to clone using HTTPS first, but with a timeout to avoid hangs
            # If it prompts for credentials, it will fail.
            # We add 'GIT_TERMINAL_PROMPT=0' to ensure no prompts.
            # If this fails with 128, it means authentication failed.
            echo "Attempting to clone go-lcov using HTTPS (non-interactive)..."
            GIT_TERMINAL_PROMPT=0 git clone --depth 1 https://github.com/jstemmer/go-lcov.git || {
                echo "HTTPS clone failed. This usually means a credentials issue even for public repos in non-interactive mode."
                echo "Please ensure your CircleCI SSH key for github.com is correctly configured."
                echo "As a fallback, we will try to build go-lcov via 'go install' which sometimes handles public repos differently."
                # As a last resort, try the original go install command, hoping it works now.
                # If your SSH setup is correct for CircleCI, this should work.
                go install github.com/jstemmer/go-lcov@latest || {
                    echo "ERROR: go-lcov installation failed via both manual clone and go install. Check SSH setup and network."
                    exit 1
                }
            }

            # If clone was successful, navigate into the cloned repo and build/install
            if [ -d "go-lcov" ]; then
                cd go-lcov
                echo "Building and installing go-lcov from cloned source..."
                go install ./... # Build and install the binary to $GOPATH/bin
            fi

            # Verify go-lcov is installed and executable
            which go-lcov || { echo "go-lcov not found in PATH after installation!"; exit 1; }
            go-lcov --version || { echo "go-lcov failed to run after installation!"; exit 1; }
            echo "go-lcov installed successfully!"
      # --- END: Manual go-lcov Installation ---

      # 运行 Go 测试并生成原始的 coverage.out 文件
      - run:
          name: Run Go tests and generate raw coverage.out
          command: |
            rm -f coverage.out # 清理旧文件
            go test -v -coverprofile=coverage.out ./... # 生成原始 Go 覆盖率文件
            # 检查文件是否存在且非空
            if [ ! -s coverage.out ]; then
              echo "ERROR: coverage.out was not generated or is empty!"
              exit 1
            fi

      # 使用 go-lcov 将 coverage.out 转换为 LCOV 格式
      - run:
          name: Convert coverage.out to LCOV
          command: |
            rm -f coverage.lcov # 清理旧 LCOV 文件
            go-lcov -v coverage.out > coverage.lcov # 将 .out 转换为 .lcov
            # 检查转换后的 LCOV 文件
            if [ ! -s coverage.lcov ]; then
              echo "ERROR: coverage.lcov was not generated or is empty after conversion!"
              exit 1
            fi

      # 调试步骤：验证最终的 coverage.lcov 内容 (保留直到成功)
      - run:
          name: Verify final coverage.lcov content
          command: |
            echo "--- Contents of final coverage.lcov ---"
            cat coverage.lcov || echo "ERROR: coverage.lcov is missing!"
            echo "---------------------------------------"
            # 明确检查 LCOV 标志
            if ! grep -q "SF:" coverage.lcov; then
              echo "WARNING: coverage.lcov does not appear to be valid LCOV format (missing SF: lines)."
              exit 1
            fi
            if grep -q "mode: atomic" coverage.lcov; then
              echo "WARNING: coverage.lcov still contains raw Go coverprofile format!"
              exit 1
            fi

      # 上传覆盖率报告到 Coveralls
      - coveralls/upload:
          coverage_file: coverage.lcov # 指定 LCOV 格式的覆盖率文件
          coverage_format: lcov        # 明确指定 LCOV 格式
          compare_ref: main            # 将当前 PR 的覆盖率与 main 分支进行比较

workflows:
  test:
    when: << pipeline.parameters.run_go_test >>
    jobs:
      - go_test
