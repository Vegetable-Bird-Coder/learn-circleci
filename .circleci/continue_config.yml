version: 2.1

orbs:
  coveralls: coveralls/coveralls@2.2.5

parameters:
  run_go_test:
    type: boolean
    default: false

jobs:
  go_test:
    docker:
      # 替换为通用操作系统镜像
      - image: cimg/base:stable
    steps:
      - checkout
      # **手动安装 Go 运行时**
      - run:
          name: Install Go runtime
          command: |
            # 根据你的需求选择 Go 版本，这里以 1.24.1 为例
            GO_VERSION="1.24.1"
            GO_ARCH="amd64" # 或者 arm64 if using aarch64 machine runner
            GO_TAR="go${GO_VERSION}.linux-${GO_ARCH}.tar.gz"
            curl -LO https://go.dev/dl/${GO_TAR}
            tar -C /usr/local -xzf ${GO_TAR}
            rm ${GO_TAR}
            echo 'export PATH=/usr/local/go/bin:$PATH' >> $BASH_ENV
            echo 'export GOPATH=$HOME/go' >> $BASH_ENV # 设置 GOPATH
            echo 'export PATH=$GOPATH/bin:$PATH' >> $BASH_ENV # 将 GOPATH/bin 加入 PATH
            source $BASH_ENV
            go version # 验证 Go 安装
            go env # 打印 Go 环境信息用于调试

      # ⚠️ 确保 add_ssh_keys 存在且配置正确
      - add_ssh_keys:
          fingerprints:
            - "SHA256:LzoU0FR46y2axEXYuQfKVht59JkaVYyvB4YZOcWdHpo" # 再次确认你的密钥指纹

      # 强制 Go Modules 使用 SSH 访问 GitHub，并且不要提示确认
      - run:
          name: Configure Git for SSH
          command: |
            # 这是最关键的部分，确保 Git 使用 SSH
            git config --global url."git@github.com:".insteadOf "https://github.com/"
            echo 'export GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no"' >> $BASH_ENV
            source $BASH_ENV
            echo "GIT_SSH_COMMAND: $GIT_SSH_COMMAND" # 验证环境变量

      # --- 以下步骤与之前相同，因为 Go 环境和 Git 已手动设置 ---

      # 步骤 1: 安装 gocov 工具
      - run:
          name: Install gocov
          command: |
            go install github.com/timakin/gocov/cmd/gocov@latest
            which gocov || { echo "gocov not found in PATH!"; exit 1; }

      # 步骤 2: 安装 gocov-lcov 工具
      - run:
          name: Install gocov-lcov
          command: |
            go install github.com/urakumo/gocov-lcov@latest
            which gocov-lcov || { echo "gocov-lcov not found in PATH!"; exit 1; }

      # ... (后续的 Go 测试、LCOV 转换和 Coveralls 上传步骤不变) ...
      - run:
          name: Run Go tests and generate JSON coverage
          command: |
            rm -f coverage.json
            gocov test ./... > coverage.json
            if [ ! -s coverage.json ]; then
              echo "ERROR: coverage.json was not generated or is empty!"
              exit 1
            fi

      - run:
          name: Convert JSON coverage to LCOV
          command: |
            rm -f coverage.lcov
            cat coverage.json | gocov-lcov > coverage.lcov
            if [ ! -s coverage.lcov ]; then
              echo "ERROR: coverage.lcov was not generated or is empty after conversion!"
              exit 1
            fi

      - run:
          name: Verify final coverage.lcov content
          command: |
            echo "--- Contents of final coverage.lcov ---"
            cat coverage.lcov || echo "ERROR: coverage.lcov is missing!"
            echo "---------------------------------------"
            if ! grep -q "SF:" coverage.lcov; then
              echo "WARNING: coverage.lcov does not appear to be valid LCOV format (missing SF: lines)."
              exit 1
            fi
            if grep -q "mode: atomic" coverage.lcov; then
              echo "WARNING: coverage.lcov still contains raw Go coverprofile format!"
              exit 1
            fi

      - coveralls/upload:
          coverage_file: coverage.lcov
          coverage_format: lcov
          compare_ref: main

workflows:
  test:
    when: << pipeline.parameters.run_go_test >>
    jobs:
      - go_test
