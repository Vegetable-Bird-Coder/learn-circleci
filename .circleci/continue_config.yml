version: 2.1

orbs:
  coveralls: coveralls/coveralls@2.2.5

parameters:
  run_go_test:
    type: boolean
    default: false

jobs:
  go_test:
    docker:
      - image: cimg/go:1.24.1
    steps:
      - checkout
      - run:
          name: Set GOPATH and add to PATH
          command: |
            echo 'export GOPATH=$HOME/go' >> $BASH_ENV
            echo 'export PATH=$GOPATH/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV
            go env # Verify environment variables are set

      # Install go-acc tool
      - run:
          name: Install go-acc
          command: go install github.com/ory/go-acc@latest

      # Run Go tests and generate LCOV format coverage
      # Ensure you run this from the root of your Go module.
      # If your module is in a subdirectory, adjust './...' accordingly.
      - run:
          name: Run Go tests and generate LCOV coverage
          command: |
            # Remove any previous coverage files to ensure clean generation
            rm -f coverage.lcov
            # Run go-acc. This command internally runs 'go test -coverprofile' and converts.
            # The output of your 'cat' command indicates 'go-acc' might not be generating LCOV.
            # Make sure your go.mod is in the root of the project ($PWD) for './...' to work.
            go-acc -o coverage.lcov ./...

      # Debugging steps (KEEP THESE for verification)
      - run:
          name: Check for coverage.lcov and its content
          command: |
            echo "Listing files in current directory:"
            ls -la ./
            echo "Contents of coverage.lcov:"
            cat coverage.lcov || echo "coverage.lcov is empty or not found."

      # Upload coverage report to Coveralls
      - coveralls/upload:
          coverage_file: coverage.lcov # Specify the LCOV format coverage file
          coverage_format: lcov        # Explicitly specify coverage file format as lcov
          compare_ref: main            # Compare current PR coverage with main branch
          debug: true # Enable debug mode for more detailed output

workflows:
  test:
    when: << pipeline.parameters.run_go_test >>
    jobs:
      - go_test
